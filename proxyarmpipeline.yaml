# Build and push an ARM32v7 IoT Edge module

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:
#Exporting the module version from module.json for Docker Image Module versioning
- script: |
    echo '##vso[task.setvariable variable=moduleversion]'$(jq -r .image.tag.version $(System.DefaultWorkingDirectory)/proxy/HubEdgeProxy/modules/HubEdgeProxyModule/module.json)
    
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'sudo apt update && sudo apt install qemu-user-static -y'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset'

#Copying the qemu-arm-static Intel binary in the root folder of my module (where the Dockerfile.arm32v7 is located)
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'sudo cp /usr/bin/qemu-arm-static $(System.DefaultWorkingDirectory)/proxy/HubEdgeProxy/modules/HubEdgeProxyModule/'

#A Dockerregistry service connection should be created before this step runs
#More info here: https://aka.ms/adoserviceconnection
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: 'bine-acr-connection'

#This will build and push the myazurecontainerregistry.azurecr.io/myrepo:0.1.12-arm32v7 Docker image
- task: Docker@2
  inputs:
    command: 'buildAndPush'
    Dockerfile: 'proxy/HubEdgeProxy/modules/HubEdgeProxyModule/Dockerfile.arm32v7'
    buildContext: 'proxy/HubEdgeProxy/modules/HubEdgeProxyModule/'
    containerRegistry: 'bine-acr-connection'
    repository: 'hubproxyarm'
    tags: '$(moduleversion)-arm32v7'